SpellInfo

const int HENCH_SPELL_INFO_DAMAGE_BREACH	= 0x1;
const int HENCH_SPELL_INFO_DAMAGE_DISPEL	= 0x2;
const int HENCH_SPELL_INFO_DAMAGE_RESIST	= 0x4;


const int HENCH_SPELL_INFO_SPELL_TYPE_MASK          = 0x000000ff;


const int HENCH_SPELL_INFO_SPELL_TYPE_ATTACK        = 1;
const int HENCH_SPELL_INFO_SPELL_TYPE_AC_BUFF       = 2;
const int HENCH_SPELL_INFO_SPELL_TYPE_BUFF          = 3;
const int HENCH_SPELL_INFO_SPELL_TYPE_PERSISTENTAREA = 4;
const int HENCH_SPELL_INFO_SPELL_TYPE_POLYMORPH     = 5;
const int HENCH_SPELL_INFO_SPELL_TYPE_DISPEL        = 6;
const int HENCH_SPELL_INFO_SPELL_TYPE_INVISIBLE     = 7;
const int HENCH_SPELL_INFO_SPELL_TYPE_CURECONDITION = 8;
const int HENCH_SPELL_INFO_SPELL_TYPE_SUMMON        = 9;
const int HENCH_SPELL_INFO_SPELL_TYPE_HEAL          = 10;
const int HENCH_SPELL_INFO_SPELL_TYPE_HARM          = 11;
const int HENCH_SPELL_INFO_SPELL_TYPE_ATTR_BUFF     = 12;
const int HENCH_SPELL_INFO_SPELL_TYPE_ENGR_PROT     = 13;
const int HENCH_SPELL_INFO_SPELL_TYPE_MELEE_ATTACK  = 14;
const int HENCH_SPELL_INFO_SPELL_TYPE_ARCANE_ARCHER = 15;
const int HENCH_SPELL_INFO_SPELL_TYPE_SPELL_PROT    = 16;
const int HENCH_SPELL_INFO_SPELL_TYPE_DRAGON_BREATH = 17;
const int HENCH_SPELL_INFO_SPELL_TYPE_DETECT_INVIS  = 18;
//const int HENCH_SPELL_INFO_SPELL_TYPE_WARLOCK       = 19;
const int HENCH_SPELL_INFO_SPELL_TYPE_DOMINATE      = 20;
const int HENCH_SPELL_INFO_SPELL_TYPE_WEAPON_BUFF   = 21;
const int HENCH_SPELL_INFO_SPELL_TYPE_BUFF_ANIMAL_COMP = 22;
const int HENCH_SPELL_INFO_SPELL_TYPE_PROT_EVIL     = 23;
const int HENCH_SPELL_INFO_SPELL_TYPE_PROT_GOOD     = 24;
const int HENCH_SPELL_INFO_SPELL_TYPE_REGENERATE    = 25;
const int HENCH_SPELL_INFO_SPELL_TYPE_GUST_OF_WIND  = 26;
const int HENCH_SPELL_INFO_SPELL_TYPE_ELEMENTAL_SHIELD = 27;
const int HENCH_SPELL_INFO_SPELL_TYPE_TURN_UNDEAD   = 28;
const int HENCH_SPELL_INFO_SPELL_TYPE_DR_BUFF       = 29;
const int HENCH_SPELL_INFO_SPELL_TYPE_MELEE_ATTACK_BUFF   = 30;
const int HENCH_SPELL_INFO_SPELL_TYPE_RAISE_DEAD          = 31;
const int HENCH_SPELL_INFO_SPELL_TYPE_CONCEALMENT         = 32;
const int HENCH_SPELL_INFO_SPELL_TYPE_ATTACK_SPECIAL		= 33;
const int HENCH_SPELL_INFO_SPELL_TYPE_HEAL_SPECIAL		= 34;

const int HENCH_SPELL_INFO_MASTER_FLAG              = 0x00000100;
const int HENCH_SPELL_INFO_IGNORE_FLAG              = 0x00000200;
const int HENCH_SPELL_INFO_MASTER_OR_IGNORE_FLAG    = 0x00000300;
const int HENCH_SPELL_INFO_CONCENTRATION_FLAG       = 0x00000400;
const int HENCH_SPELL_INFO_REMOVE_CONCENTRATION_FLAG= 0xfffffbff;
const int HENCH_SPELL_INFO_UNLIMITED_FLAG           = 0x00000800;
// TODO not used const int HENCH_SPELL_INFO_SPELLLIKE_ABILITY		= 0x00001000;
const int HENCH_SPELL_INFO_SPELL_LEVEL_MASK         = 0x0001e000;
const int HENCH_SPELL_INFO_SPELL_LEVEL_SHIFT        = 13;
const int HENCH_SPELL_INFO_HEAL_OR_CURE             = 0x00020000;
const int HENCH_SPELL_INFO_SHORT_DUR_BUFF           = 0x00040000;
const int HENCH_SPELL_INFO_MEDIUM_DUR_BUFF          = 0x00080000;
const int HENCH_SPELL_INFO_LONG_DUR_BUFF            = 0x00100000;

// flags that are added on
// spell is from item
const int HENCH_SPELL_INFO_ITEM_FLAG                = 0x00800000;




const int HENCH_SHAPE_NONE                          = 7;        // indicates no shape
const int HENCH_SHAPE_FACTION                       = 6;        // indicates faction targets

const int HENCH_SPELL_TARGET_SHAPE_MASK             = 0x00000007;

const int HENCH_SPELL_TARGET_RANGE_MASK             = 0x00000038;
const int HENCH_SPELL_TARGET_RANGE_PERSONAL         = 0x00000000;
const int HENCH_SPELL_TARGET_RANGE_TOUCH            = 0x00000008;
const int HENCH_SPELL_TARGET_RANGE_SHORT            = 0x00000010;
const int HENCH_SPELL_TARGET_RANGE_MEDIUM           = 0x00000018;
const int HENCH_SPELL_TARGET_RANGE_LONG             = 0x00000020;
const int HENCH_SPELL_TARGET_RANGE_INFINITE         = 0x00000028;

const int HENCH_SPELL_TARGET_RADIUS_MASK            = 0x0000ffc0;   // 10 bits radius * 10

const int HENCH_SPELL_TARGET_SHAPE_LOOP				= 0x00010000;
const int HENCH_SPELL_TARGET_CHECK_COUNT			= 0x00020000;
const int HENCH_SPELL_TARGET_MISSILE_TARGETS		= 0x00040000;
const int HENCH_SPELL_TARGET_SECONDARY_TARGETS		= 0x00080000;
const int HENCH_SPELL_TARGET_SECONDARY_HALF_DAM		= 0x00100000;
const int HENCH_SPELL_TARGET_VIS_REQUIRED_FLAG      = 0x00200000;
const int HENCH_SPELL_TARGET_RANGED_SEL_AREA_FLAG   = 0x00400000;
const int HENCH_SPELL_TARGET_PERSISTENT_SPELL		= 0x00800000;
const int HENCH_SPELL_TARGET_SCALE_EFFECT			= 0x01000000;
const int HENCH_SPELL_TARGET_NECROMANCY_SPELL		= 0x02000000;
const int HENCH_SPELL_TARGET_REGULAR_SPELL			= 0x04000000;


const int HENCH_SPELL_SAVE_TYPE_CUSTOM_MASK         = 0x0000003f;
const int HENCH_SPELL_SAVE_TYPE_IMMUNITY1_MASK      = 0x00000fc0;
const int HENCH_SPELL_SAVE_TYPE_IMMUNITY2_MASK      = 0x0003f000;

const int HENCH_SPELL_SAVE_TYPE_SAVES_MASK          = 0x03fc0000;
const int HENCH_SPELL_SAVE_TYPE_SAVES1_SAVE_MASK    = 0x000c0000;
const int HENCH_SPELL_SAVE_TYPE_SAVE1_FORT          = 0x00040000;
const int HENCH_SPELL_SAVE_TYPE_SAVE1_REFLEX        = 0x00080000;
const int HENCH_SPELL_SAVE_TYPE_SAVE1_WILL          = 0x000c0000;
const int HENCH_SPELL_SAVE_TYPE_SAVES1_KIND_MASK    = 0x00300000;
const int HENCH_SPELL_SAVE_TYPE_SAVE1_EFFECT_ONLY   = 0x00000000;
const int HENCH_SPELL_SAVE_TYPE_SAVE1_DAMAGE_HALF   = 0x00100000;
const int HENCH_SPELL_SAVE_TYPE_SAVE1_EFFECT_DAMAGE = 0x00200000;
const int HENCH_SPELL_SAVE_TYPE_SAVE1_DAMAGE_EVASION= 0x00300000;
const int HENCH_SPELL_SAVE_TYPE_SAVES1_MASK    		= 0x003c0000;
const int HENCH_SPELL_SAVE_TYPE_SAVES1_MASK_REMOVE	= 0xffc3ffff;
const int HENCH_SPELL_SAVE_TYPE_SAVES2_SAVE_MASK    = 0x00c00000;
const int HENCH_SPELL_SAVE_TYPE_SAVE2_FORT          = 0x00400000;
const int HENCH_SPELL_SAVE_TYPE_SAVE2_REFLEX        = 0x00800000;
const int HENCH_SPELL_SAVE_TYPE_SAVE2_WILL          = 0x00c00000;
const int HENCH_SPELL_SAVE_TYPE_SAVES2_KIND_MASK    = 0x03000000;
const int HENCH_SPELL_SAVE_TYPE_SAVE2_EFFECT_ONLY   = 0x00000000;
const int HENCH_SPELL_SAVE_TYPE_SAVE2_DAMAGE_HALF   = 0x01000000;
const int HENCH_SPELL_SAVE_TYPE_SAVE2_EFFECT_DAMAGE = 0x02000000;
const int HENCH_SPELL_SAVE_TYPE_SAVE2_DAMAGE_EVASION= 0x03000000;

const int HENCH_SPELL_SAVE_TYPE_SAVE12_SHIFT    	= 0x10;

const int HENCH_SPELL_SAVE_TYPE_SR_FLAG             = 0x80000000;
const int HENCH_SPELL_SAVE_TYPE_CHECK_FRIENDLY_FLAG = 0x40000000;
const int HENCH_SPELL_SAVE_TYPE_NOTSELF_FLAG        = 0x20000000;
const int HENCH_SPELL_SAVE_TYPE_TOUCH_MELEE_FLAG    = 0x10000000;
const int HENCH_SPELL_SAVE_TYPE_TOUCH_RANGE_FLAG    = 0x08000000;
const int HENCH_SPELL_SAVE_TYPE_MIND_SPELL_FLAG     = 0x04000000;

const int HENCH_SPELL_INFO_BUFF_MASK                = 0x0f000000;
const int HENCH_SPELL_INFO_BUFF_CASTER_LEVEL        = 0x01000000;
const int HENCH_SPELL_INFO_BUFF_HD_LEVEL            = 0x02000000;
const int HENCH_SPELL_INFO_BUFF_FIXED               = 0x03000000;
const int HENCH_SPELL_INFO_BUFF_CHARISMA            = 0x0b000000;
//const int HENCH_SPELL_INFO_BUFF_BARD_LEVEL          = 0x0c000000;
const int HENCH_SPELL_INFO_BUFF_DRAGON				= 0x0d000000;

const int HENCH_SPELL_INFO_BUFF_LEVEL_ADJ_MASK      = 0x00f00000;
const int HENCH_SPELL_INFO_BUFF_LEVEL_DIV_MASK      = 0x000f0000;
const int HENCH_SPELL_INFO_BUFF_LEVEL_TYPE_MASK     = 0x0000c000;
const int HENCH_SPELL_INFO_BUFF_LEVEL_TYPE_DICE     = 0x00000000;
const int HENCH_SPELL_INFO_BUFF_LEVEL_TYPE_ADJ      = 0x00004000;
//const int HENCH_SPELL_INFO_BUFF_LEVEL_TYPE_COUNT  = 0x00008000;
const int HENCH_SPELL_INFO_BUFF_LEVEL_TYPE_CONST    = 0x0000c000;
const int HENCH_SPELL_INFO_BUFF_LEVEL_LIMIT_MASK    = 0x00003f00;
const int HENCH_SPELL_INFO_BUFF_AMOUNT_MASK         = 0x000000ff;

const int HENCH_SPELL_INFO_DAMAGE_MASK              = 0xf0000000;
const int HENCH_SPELL_INFO_DAMAGE_CASTER_LEVEL      = 0x00000000;
const int HENCH_SPELL_INFO_DAMAGE_HD_LEVEL          = 0x10000000;
const int HENCH_SPELL_INFO_DAMAGE_FIXED             = 0x20000000;
const int HENCH_SPELL_INFO_DAMAGE_CURE              = 0x30000000;
const int HENCH_SPELL_INFO_DAMAGE_DRAGON            = 0x40000000;
const int HENCH_SPELL_INFO_DAMAGE_SPECIAL_COUNT     = 0x50000000;
const int HENCH_SPELL_INFO_DAMAGE_CUSTOM	        = 0x60000000;
const int HENCH_SPELL_INFO_DAMAGE_DRAG_DISP         = 0x70000000;
const int HENCH_SPELL_INFO_DAMAGE_AA_LEVEL          = 0x80000000;
//const int HENCH_SPELL_INFO_DAMAGE_WP_LEVEL          = 0x90000000;
const int HENCH_SPELL_INFO_DAMAGE_LAY_ON_HANDS      = 0xa0000000;
const int HENCH_SPELL_INFO_DAMAGE_CHARISMA          = 0xb0000000;
const int HENCH_SPELL_INFO_DAMAGE_BARD_PERFORM      = 0xc0000000;
const int HENCH_SPELL_INFO_DAMAGE_WARLOCK           = 0xd0000000;

const int HENCH_SPELL_INFO_DAMAGE_LEVEL_DIV_MASK    = 0x0c000000;
const int HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_MASK   = 0x03000000;
const int HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_DICE   = 0x00000000;
const int HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_ADJ    = 0x01000000;
const int HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_COUNT  = 0x02000000;
const int HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_CONST  = 0x03000000;
const int HENCH_SPELL_INFO_DAMAGE_FIXED_COUNT		= 0x0f000000;
const int HENCH_SPELL_INFO_DAMAGE_LEVEL_LIMIT_MASK  = 0x00f00000;
const int HENCH_SPELL_INFO_DAMAGE_AMOUNT_MASK       = 0x000ff000;
const int HENCH_SPELL_INFO_DAMAGE_TYPE_MASK         = 0x00000fff;


TargetInfo

EffectWeight = float value determining how useful this spell is usually

EffectTypes

DamageInfo

SaveType

SaveDCType

// SpellInfo
	SetLocalInt(GetModule(), gsCurrentSpellInfoStr, spellIDInfo);
	gsCurrentspInfo.spellInfo |= HENCH_SPELL_INFO_ITEM_FLAG;
        if (nItemType == HENCH_ITEM_TYPE_POTION)
        {
            gsCurrentspInfo.range = 0.0;
        }
        else
        {
                // wands, etc. don't have AoO
            gsCurrentspInfo.spellInfo &= HENCH_SPELL_INFO_REMOVE_CONCENTRATION_FLAG;
        }
        
        switch (iSpellType)
    {
		case HENCH_SPELL_INFO_SPELL_TYPE_ATTACK:
		case HENCH_SPELL_INFO_SPELL_TYPE_HEAL:
		case HENCH_SPELL_INFO_SPELL_TYPE_HARM:
			//DEBUGGING// if (DEBUGGING >= 5) { CSLDebug(  "SCDispatchSpell calling SCAISpellAttack", GetFirstPC() ); }
			SCAISpellAttack(SCGetCurrentSpellSaveType(), iTargetInformation, oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_BUFF:
			SCHenchCheckBuff(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_AC_BUFF:
			SCHenchCheckACBuff(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_DR_BUFF:
			SCHenchCheckDRBuff(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_PERSISTENTAREA:
			// just activate with quick cast if not present
			if (!GetHasSpellEffect(gsCurrentspInfo.spellID, oCharacter))
			{
				giAuraSpellToCast = gsCurrentspInfo.spellID;			
			}
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_POLYMORPH:
			if (!SCGetHenchAssociateState(HENCH_ASC_DISABLE_POLYMORPH))
			{
				SCHenchCheckPolymorph(oCharacter);
			}
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_DISPEL:
			SCHenchCheckDispel(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_INVISIBLE:
			if (gbCheckInvisbility)
			{
				SCHenchCheckInvisibility(oCharacter);
			}
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_CURECONDITION:
			SCHenchCheckCureCondition(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_SUMMON:
			if (!GetIsObjectValid(GetAssociate(ASSOCIATE_TYPE_SUMMONED)) && !SCGetHenchAssociateState(HENCH_ASC_DISABLE_SUMMONS))
			{
				SCHenchCheckSummons(oCharacter);
			}
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_ATTR_BUFF:
			SCHenchCheckAttrBuff(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_ENGR_PROT:
			SCHenchCheckEnergyProt(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_MELEE_ATTACK:
			SCHenchMeleeAttackSpell(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_ARCANE_ARCHER:
			{
				int itemType = GetBaseItemType(GetItemInSlot(INVENTORY_SLOT_RIGHTHAND));
				if ((itemType == BASE_ITEM_LONGBOW) || (itemType == BASE_ITEM_SHORTBOW))
				{
					//DEBUGGING// if (DEBUGGING >= 5) { CSLDebug(  "SCDispatchSpell 2 calling SCAISpellAttack", GetFirstPC() ); }
					SCAISpellAttack(SCGetCurrentSpellSaveType(), iTargetInformation, oCharacter);
				}
			}
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_SPELL_PROT:
			SCHenchCheckSpellProtections();
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_DRAGON_BREATH:
			{
				int combatRoundCount = GetLocalInt(oCharacter, "tkCombatRoundCount");
				int lastDragonBreath = GetLocalInt(oCharacter, "tkLastDragonBreath");
				if (lastDragonBreath == 0 || lastDragonBreath < combatRoundCount - 2)
				{
					// breath is unlimited
					gsCurrentspInfo.castingInfo = HENCH_CASTING_INFO_USE_SPELL_REGULAR | HENCH_CASTING_INFO_CHEAT_CAST_FLAG;
					gsCurrentspInfo.otherID = METAMAGIC_NONE;
					//DEBUGGING// if (DEBUGGING >= 5) { CSLDebug(  "SCDispatchSpell 3 calling SCAISpellAttack", GetFirstPC() ); }
					SCAISpellAttack(SCGetCurrentSpellSaveType(), iTargetInformation, oCharacter);
				}
			}
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_DETECT_INVIS:
			SCHenchCheckDetectInvisibility(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_DOMINATE:
			if (!GetIsObjectValid(GetAssociate(ASSOCIATE_TYPE_DOMINATED)))
			{
				int lastDominate = GetLocalInt(oCharacter, "tkLastDominate");
				int combatRoundCount = GetLocalInt(oCharacter, "tkCombatRoundCount");
				if (lastDominate == 0 && lastDominate >= combatRoundCount - 7)
				{
					//DEBUGGING// if (DEBUGGING >= 5) { CSLDebug(  "SCDispatchSpell 4 calling SCAISpellAttack", GetFirstPC() ); }
					SCAISpellAttack(SCGetCurrentSpellSaveType(), iTargetInformation, oCharacter);
				}
			}
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_WEAPON_BUFF:
			SCHenchCheckWeaponBuff(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_BUFF_ANIMAL_COMP:
			SCHenchCheckAnimalCompanionBuff(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_PROT_EVIL:
			SCHenchCheckProtEvil(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_PROT_GOOD:
			SCHenchCheckProtGood(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_REGENERATE:
			SCHenchCheckRegeneration(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_GUST_OF_WIND:
			gsGustOfWind = gsCurrentspInfo;
	// TODO MotB disabled for now, check friendly AoEs SCAISpellAttack(SCGetCurrentSpellSaveType());
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_ELEMENTAL_SHIELD:
			SCHenchCheckElementalShield(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_TURN_UNDEAD:
			SCHenchCheckTurnUndead(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_MELEE_ATTACK_BUFF:
			SCHenchMeleeAttackBuff(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_RAISE_DEAD:
			SCHenchRaiseDead(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_CONCEALMENT:
			SCHenchConcealment(oCharacter);
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_ATTACK_SPECIAL:
			SCAISpellAttackSpecial();
			break;
		case HENCH_SPELL_INFO_SPELL_TYPE_HEAL_SPECIAL:
			SCHenchCheckHealSpecial();
			break;
    }
    
    
// TargetInfo
	string targetInfoStr = Get2DAString("henchspells", "TargetInfo", nSpellID);
	SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "TargetInfo", StringToInt(targetInfoStr));
	switch (iTargetInformation & HENCH_SPELL_TARGET_RANGE_MASK)
    {
		case HENCH_SPELL_TARGET_RANGE_PERSONAL:
			gsCurrentspInfo.range = 0.0;
			break;
		case HENCH_SPELL_TARGET_RANGE_TOUCH:
			gsCurrentspInfo.range = 4.0;
			break;
		case HENCH_SPELL_TARGET_RANGE_SHORT:
			gsCurrentspInfo.range = 8.0;
			break;
		case HENCH_SPELL_TARGET_RANGE_MEDIUM:
			gsCurrentspInfo.range = 20.0;
			break;
		case HENCH_SPELL_TARGET_RANGE_LONG:
			gsCurrentspInfo.range = 40.0;
			break;
		case HENCH_SPELL_TARGET_RANGE_INFINITE:
			gsCurrentspInfo.range = 300.0;
			break;
    }


// EffectWeight
	targetInfoStr = Get2DAString("henchspells", "EffectWeight", nSpellID);
	SetLocalFloat(GetModule(), gsCurrentSpellInfoStr + "EffectWeight", StringToFloat(targetInfoStr));

// EffectTypes
	targetInfoStr = Get2DAString("henchspells", "EffectTypes", nSpellID);
	SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "EffectTypes", StringToInt(targetInfoStr));

// DamageInfo
	targetInfoStr = Get2DAString("henchspells", "DamageInfo", nSpellID);
	SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "DamageInfo", StringToInt(targetInfoStr));


// SaveType
	targetInfoStr = Get2DAString("henchspells", "SaveType", nSpellID);
	SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "SaveType", StringToInt(targetInfoStr));


// SaveDCType
	targetInfoStr = Get2DAString("henchspells", "SaveDCType", nSpellID);
	SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "SaveDCType", StringToInt(targetInfoStr));
	
	
	
	int spellInformation = SCGetSpellInformation(nSpellID);
    if (spellInformation & HENCH_SPELL_INFO_MASTER_FLAG)
    {
		string sMasterSpellInfoStr = gsCurrentSpellInfoStr;
		int spellID;
		spellID = GetLocalInt(GetModule(), sMasterSpellInfoStr + "TargetInfo");
		if (!spellID)
		{
			return;
		}
		SCHenchFeatDispatch(nFeatID, spellID, TRUE, oCharacter);
		spellID = GetLocalInt(GetModule(), sMasterSpellInfoStr + "EffectTypes");
		if (!spellID)
		{
			return;
		}
		SCHenchFeatDispatch(nFeatID, spellID, TRUE, oCharacter);
		spellID = GetLocalInt(GetModule(), sMasterSpellInfoStr + "DamageInfo");
		if (!spellID)
		{
			return;
		}
		SCHenchFeatDispatch(nFeatID, spellID, TRUE, oCharacter);
		spellID = GetLocalInt(GetModule(), sMasterSpellInfoStr + "SaveType");
		if (!spellID)
		{
			return;
		}
		SCHenchFeatDispatch(nFeatID, spellID, TRUE, oCharacter);
		spellID = GetLocalInt(GetModule(), sMasterSpellInfoStr + "SaveDCType");
		if (!spellID)
		{
			return;
		}
		SCHenchFeatDispatch(nFeatID, spellID, TRUE, oCharacter);
		return;
    }
    
    
    struct sSpellInformation gsBestDispel;
struct sSpellInformation gsBestBreach;
struct sSpellInformation gsGustOfWind;
struct sSpellInformation gsSpellResistanceReduction;
struct sSpellInformation gsMeleeAttackspInfo;
struct sSpellInformation gsDelayedAttrBuff;
struct sSpellInformation gsPolyAttrBuff;
struct sSpellInformation gsPolymorphspInfo;
struct sSpellInformation gsAttackTargetInfo;  // main global for holding best attack option
struct sSpellInformation gsBuffTargetInfo;  // main global for holding best buff option
struct sSpellInformation gsBestSelfInvisibility;	// best self invisibility
struct sSpellInformation gsBestSelfHide;	// best self hide (early rounds)
struct sSpellInformation gsCurrentspInfo;
    
    
    
    
    string targetInfoStr = Get2DAString("henchspells", "TargetInfo", nSpellID);
            SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "TargetInfo", StringToInt(targetInfoStr));

            targetInfoStr = Get2DAString("henchspells", "EffectWeight", nSpellID);
            SetLocalFloat(GetModule(), gsCurrentSpellInfoStr + "EffectWeight", StringToFloat(targetInfoStr));

            targetInfoStr = Get2DAString("henchspells", "EffectTypes", nSpellID);
            SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "EffectTypes", StringToInt(targetInfoStr));

            targetInfoStr = Get2DAString("henchspells", "DamageInfo", nSpellID);
            SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "DamageInfo", StringToInt(targetInfoStr));

            targetInfoStr = Get2DAString("henchspells", "SaveType", nSpellID);
            SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "SaveType", StringToInt(targetInfoStr));

            targetInfoStr = Get2DAString("henchspells", "SaveDCType", nSpellID);
            SetLocalInt(GetModule(), gsCurrentSpellInfoStr + "SaveDCType", StringToInt(targetInfoStr));
            
            
            
            
            struct sDamageInformation SCGetCurrentSpellDamage(int casterLevel, int bIsItem, object oCharacter = OBJECT_SELF)
{
    //DEBUGGING// if (DEBUGGING >= 6) { CSLDebug(  "SCGetCurrentSpellDamage Start", GetFirstPC() ); }
    
    struct sDamageInformation result;

    result.count = 1;

    int damageInfo = SCGetCurrentSpellDamageInfo();

    int curDamageScan = damageInfo & HENCH_SPELL_INFO_DAMAGE_TYPE_MASK;
    result.damageTypeMask = curDamageScan;

    int curDamageIndex;
    int iIteration = 0;
	
    while (curDamageScan > 0 && iIteration < 30)
    {
        //DEBUGGING// igDebugLoopCounter += 1;
        iIteration++; // was doing a TMI in this function, this is capping how many it can check
        if (curDamageScan & 0x1)
        {
            result.numberOfDamageTypes ++;
            if (result.numberOfDamageTypes == 1)
            {
                result.damageType1 = 1 << curDamageIndex;
            }
            else
            {
                result.damageType2 = 1 << curDamageIndex;
            }
        }
        curDamageScan = curDamageScan >> 1;
        curDamageIndex ++;
    }

    int damageAmount =  (HENCH_SPELL_INFO_DAMAGE_AMOUNT_MASK & damageInfo) >> 12;
    int damageType = damageInfo & HENCH_SPELL_INFO_DAMAGE_MASK;
    switch (damageType)
    {
		case HENCH_SPELL_INFO_DAMAGE_CASTER_LEVEL:
		case HENCH_SPELL_INFO_DAMAGE_CURE:
			break;
		case HENCH_SPELL_INFO_DAMAGE_HD_LEVEL:
			casterLevel = GetHitDice(oCharacter);
			break;
		case HENCH_SPELL_INFO_DAMAGE_FIXED:
			result.amount = IntToFloat(damageAmount);
			result.count = ((HENCH_SPELL_INFO_DAMAGE_FIXED_COUNT & damageInfo) >> 24) + 1;
			return result;
		case HENCH_SPELL_INFO_DAMAGE_DRAGON:
			casterLevel = GetHitDice(oCharacter);
			if (casterLevel > 37)
			{
				casterLevel = 12;
			}
			else if (casterLevel > 33)
			{
				casterLevel = 11;
			}
			else
			{
				casterLevel = (casterLevel - 1) / 3 + 3;
			}
			break;
		case HENCH_SPELL_INFO_DAMAGE_SPECIAL_COUNT:
			{
				int maxCasterLevel = (HENCH_SPELL_INFO_DAMAGE_LEVEL_LIMIT_MASK & damageInfo) >> 20;
				if (maxCasterLevel > 0)
				{
					maxCasterLevel ++;
					if (casterLevel > maxCasterLevel)
					{
						casterLevel = maxCasterLevel;
					}
				}
				casterLevel ++;
				int levelDiv = ((HENCH_SPELL_INFO_DAMAGE_LEVEL_DIV_MASK & damageInfo) >> 26) + 1;
				casterLevel /= levelDiv;
				result.count = casterLevel;
				result.amount = IntToFloat(damageAmount * casterLevel);			
			}
			return result;
		case HENCH_SPELL_INFO_DAMAGE_CUSTOM:
			casterLevel += 15;  // this is divided by three
			break;
		case HENCH_SPELL_INFO_DAMAGE_DRAG_DISP:
			casterLevel = GetLevelByClass(CLASS_TYPE_DRAGONDISCIPLE, oCharacter);
			if (casterLevel < 7)
			{
				casterLevel = 2;
			}
			else if (casterLevel < 10)
			{
				casterLevel = 4;
			}
			else if (casterLevel < 13)
			{
				casterLevel = 6;
			}
			else
			{
				casterLevel = 6 + ((casterLevel - 10) / 3);
			}
			break;
		case HENCH_SPELL_INFO_DAMAGE_AA_LEVEL:
			if ((HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_MASK & damageInfo) == HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_DICE)
			{
				casterLevel = GetLevelByClass(CLASS_TYPE_ARCANE_ARCHER);
				if (casterLevel > 10)
				{
					casterLevel = 10 + ((casterLevel - 10) / 2);
				}
				else
				{
					casterLevel = 10;
				}
			}
			else
			{
				result.amount = IntToFloat(SCArcaneArcherDamageDoneByBow());
				return result;
			}
			break;
		case HENCH_SPELL_INFO_DAMAGE_LAY_ON_HANDS:
			{
				int nAmount = GetAbilityModifier(ABILITY_CHARISMA);
				if (nAmount <= 0)
				{
					result.amount = 0.0;
					return result;
				}
				nAmount *= GetLevelByClass(CLASS_TYPE_PALADIN) + GetLevelByClass(CLASS_TYPE_DIVINECHAMPION) +
					GetLevelByClass(CLASS_KAED_HOSPITALER) + GetLevelByClass(CLASS_KAED_CHAMPION_WILD);
				if (nAmount <= 0)
				{
					result.amount = 0.0;
					return result;
				}
				result.amount = IntToFloat(nAmount);
				return result;
			}
		case HENCH_SPELL_INFO_DAMAGE_BARD_PERFORM:
			{
				location locCaster	= GetLocation(oCharacter);
				int nNumEnemies   = 0;			
				// Count up enemy targets so we can divide up damage evenly.  Stop if there's more than 6, since min damage is floored at Total/6.
				object oTarget = GetFirstObjectInShape(SHAPE_SPHERE, RADIUS_SIZE_HUGE, locCaster);
				while(GetIsObjectValid(oTarget))
				{
					//DEBUGGING// igDebugLoopCounter += 1;
					if ( SCGetIsObjectValidSongTarget( oTarget ) &&  GetIsEnemy( oTarget ) )
					{
						nNumEnemies ++;
					}				
					if (nNumEnemies >= 6)
					{   // Don't need to go higher than 6 enemies.
						break;
					}		
					oTarget = GetNextObjectInShape( SHAPE_SPHERE, RADIUS_SIZE_HUGE, locCaster );
				}
				if (nNumEnemies <= 0)
				{
					result.amount = 0.0;
					return result;
				}			
				int nPerformSkill = GetSkillRank(SKILL_PERFORM, oCharacter);
				result.amount = (2.0 * nPerformSkill) / nNumEnemies;    // Damage per target is (2*Perform)/Number of Enemies, capped at most 6 enemies.
				result.count = 3;
				return result;
			}
			return result;
		case HENCH_SPELL_INFO_DAMAGE_WARLOCK:
			result.amount = IntToFloat((7 * giWarlockDamageDice + 1 ) / 2);
			if (gbWarlockMaster)
			{
				result.amount *= 1.5;
			}
			return result;
		case HENCH_SPELL_INFO_DAMAGE_CHARISMA:
			casterLevel = GetAbilityModifier(ABILITY_CHARISMA);
			return result;
    }

    int maxCasterLevel = (HENCH_SPELL_INFO_DAMAGE_LEVEL_LIMIT_MASK & damageInfo) >> 20;
    if (maxCasterLevel > 0)
    {
        maxCasterLevel *= 5;
        if (casterLevel > maxCasterLevel)
        {
            casterLevel = maxCasterLevel;
        }
    }

    if (damageType == HENCH_SPELL_INFO_DAMAGE_CURE)
    {
        damageAmount += casterLevel;
        if (!bIsItem && GetHasFeat(FEAT_HEALING_DOMAIN_POWER, oCharacter))
        {
            damageAmount += (damageAmount / 2);
        }
        if (!bIsItem && GetHasFeat(FEAT_AUGMENT_HEALING, oCharacter))
        {
            // max caster level related to spell level * 5
            damageAmount += 2 * (maxCasterLevel / 5);
        }
        result.amount = IntToFloat(damageAmount);
        return result;
    }

    int levelDiv = ((HENCH_SPELL_INFO_DAMAGE_LEVEL_DIV_MASK & damageInfo) >> 26) + 1;


    switch (HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_MASK & damageInfo)
    {
    case HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_DICE:
        result.amount = IntToFloat((damageAmount * (casterLevel / levelDiv) + 1) / 2);
        break;
    case HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_ADJ:
        result.amount = IntToFloat(damageAmount + casterLevel / levelDiv);
        break;
    case HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_COUNT:
        result.count = casterLevel / levelDiv;
        result.amount = IntToFloat(damageAmount * result.count);
        break;
    case HENCH_SPELL_INFO_DAMAGE_LEVEL_TYPE_CONST:
        result.amount = IntToFloat(damageAmount * casterLevel / levelDiv);
        break;
    default:
        result.amount = 10.0;
    }
    //DEBUGGING// if (DEBUGGING >= 11) { CSLDebug(  "SCGetCurrentSpellDamage End", GetFirstPC() ); }
    return result;
}